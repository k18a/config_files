#+TITLE: Decorators

- also called metaprogramming as a part of the program tries to modify another part of the programme at compile time

#+BEGIN_SRC python
def make_pretty(func):
    def inner():
        print("I got decorated")
        func()
    return inner

@make_pretty
def ordinary():
    print("I am ordinary")

# is equivalent to

def ordinary():
    print("I am ordinary")
ordinary = make_pretty(ordinary)
#+END_SRC

#+BEGIN_SRC python
def smart_divide(func):
   def inner(a,b):
      print("I am going to divide",a,"and",b)
      if b == 0:
         print("Whoops! cannot divide")
         return 'division by 0'

      return func(a,b)
   return inner

@smart_divide
def divide(a,b):
    return a/b

result1 = divide(2,0)
result2 = divide(2,1)

return result1,result2
#+END_SRC

#+RESULTS:
| division by 0 | 2.0 |

- decorator functions are often implemented using *args and **kwargs

#+BEGIN_SRC python
def works_for_all(func):
    def inner(*args, **kwargs):
        print("I can decorate any function")
        return func(*args, **kwargs)
    return inner
#+END_SRC

#+BEGIN_SRC python
def star(func):
    def inner(*args, **kwargs):
        print("*" * 30)
        func(*args, **kwargs)
        print("*" * 30)
    return inner

def percent(func):
    def inner(*args, **kwargs):
        print("%" * 30)
        func(*args, **kwargs)
        print("%" * 30)
    return inner

@star
@percent
def printer(msg):
    print(msg)

# is equivalent to
def printer(msg):
    print(msg)
printer = star(percent(printer))
#+END_SRC

